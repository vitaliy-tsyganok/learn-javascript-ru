/* https://learn.javascript.ru/task/sum-to

Вычислить сумму чисел до данного
важность: 5
Напишите функцию sumTo(n), которая вычисляет сумму чисел 1 + 2 + ... + n.

Например:

sumTo(1) = 1
sumTo(2) = 2 + 1 = 3
sumTo(3) = 3 + 2 + 1 = 6
sumTo(4) = 4 + 3 + 2 + 1 = 10
...
sumTo(100) = 100 + 99 + ... + 2 + 1 = 5050
Сделайте три варианта решения:

С использованием цикла.
Через рекурсию, т.к. sumTo(n) = n + sumTo(n-1) for n > 1.
С использованием формулы арифметической прогрессии.
Пример работы вашей функции: */

console.log(sumTo(100000)); // 5050

/* P.S. Какой вариант решения самый быстрый? Самый медленный? Почему?

P.P.S. Можно ли при помощи рекурсии посчитать sumTo(100000)? */

// Решение
// // С использованием цикла
// function sumTo(n) {
// 	let sum = 0
// 	for (let i = 1; i <= n; i++) {
// 		sum += i
// 	}
// 	return sum
// }
// // Через рекурсию
// function sumTo(n) {
// 	return n === 1 ? n : n + sumTo(n - 1)
// }
// С использованием формулы арифметической прогрессии
function sumTo(n) {
	return (1 + n) * n / 2 
}

// Самый быстрый вариант - с использованием формулы арифметической прогрессии. Потому что результат получается непосредственно из формулы без каких-либо дополнительных "затратных" операций
// Самый медленный вариант - через рекурсию. Потому что каждый вызов функции создает стек вызовов, каждый из которых хранит информацию о текущем контексте выполнения (лексическое окружение), что является очень затратной процедурой. Кроме того, существует еще ограничение движка в числе стеков вызовов, поэтому при помощи рекурсии посчитать sumTo(100000) не получится. Зато лекго получится с использованием формулы арифметической прогрессии.